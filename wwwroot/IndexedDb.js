window.indexedDb = {
    dbName: "AltifaPosDb",
    dbVersion: 1,

    openDb: function () {
        return new Promise((resolve, reject) => {
            var request = indexedDB.open(this.dbName, this.dbVersion);

            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                console.log("Upgrading database...");

                if (!db.objectStoreNames.contains("categories")) {
                    var objectStore = db.createObjectStore("categories", { keyPath: "CatagoryID", autoIncrement: true });
                    objectStore.createIndex("CategoryName", "CategoryName", { unique: false });
                    console.log("Created object store: categories");
                } else {
                    console.log("Object store 'categories' already exists");
                }

                if (!db.objectStoreNames.contains("products")) {
                    var objectStore = db.createObjectStore("products", { keyPath: "ProductId", autoIncrement: true });
                    objectStore.createIndex("ProductName", "ProductName", { unique: false });
                    objectStore.createIndex("categoryId", "categoryId", { unique: false });
                    objectStore.createIndex("description", "description", { unique: false });
                    objectStore.createIndex("quantity", "quantity", { unique: false });
                    objectStore.createIndex("unit", "unit", { unique: false });
                    objectStore.createIndex("price", "price", { unique: false });
                    objectStore.createIndex("imageBase64", "imageBase64", { unique: false });
                    objectStore.createIndex("alreadySale", "alreadySale", { unique: false });
                    objectStore.createIndex("waitingSale", "waitingSale", { unique: false });
                    objectStore.createIndex("notSale", "notSale", { unique: false });
                    console.log("Created object store: products");
                } else {
                    console.log("Object store 'products' already exists");
                }
            };

            request.onsuccess = function (event) {
                console.log("Database opened successfully");
                resolve(event.target.result);
            };

            request.onerror = function (event) {
                console.error("Database error: ", event.target.error);
                reject(event.target.error);
            };
        });
    },

    getDbConnection: function () {
        return new Promise((resolve, reject) => {
            var request = indexedDB.open(this.dbName, this.dbVersion);

            request.onsuccess = function (event) {
                console.log("Database connection established");
                resolve(event.target.result);
            };

            request.onerror = function (event) {
                reject(new Error("Database error: " + event.target.error));
            };
        });
    },

    // Categories CRUD
    getCategories: async function () {
        try {
            const db = await this.getDbConnection();
            return new Promise((resolve, reject) => {
                var transaction = db.transaction(["categories"], "readonly");
                var objectStore = transaction.objectStore("categories");
                var categories = [];

                objectStore.openCursor().onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        categories.push(cursor.value);
                        cursor.continue();
                    } else {
                        resolve(categories);
                    }
                };

                transaction.onerror = function (event) {
                    reject(new Error("Transaction error: " + event.target.error));
                };
            });
        } catch (error) {
            console.error("getCategories error:", error);
            throw error;
        }
    },

    addCategory: async function (category) {
        try {
            const db = await this.getDbConnection();
            var transaction = db.transaction(["categories"], "readwrite");
            var objectStore = transaction.objectStore("categories");

            var request = objectStore.add(category);
            request.onsuccess = function (event) {
                var autoGeneratedId = event.target.result;
                console.log("Category added successfully with ID: " + autoGeneratedId);
            };

            request.onerror = function (event) {
                console.error("Add category error: ", event.target.error);
            };
        } catch (error) {
            console.error("addCategory error:", error);
        }
    },

    editCategory: async function (category) {
        try {
            const db = await this.getDbConnection();
            var transaction = db.transaction(["categories"], "readwrite");
            var objectStore = transaction.objectStore("categories");

            var request = objectStore.put(category);
            request.onsuccess = function () {
                console.log("Category edited successfully");
            };

            request.onerror = function (event) {
                console.error("Edit category error: ", event.target.error);
            };
        } catch (error) {
            console.error("editCategory error:", error);
        }
    },

    deleteCategory: async function (CatagoryID) {
        try {
            const db = await this.getDbConnection();
            var transaction = db.transaction(["categories"], "readwrite");
            var objectStore = transaction.objectStore("categories");

            var request = objectStore.delete(CatagoryID);
            request.onsuccess = function () {
                console.log("Category deleted successfully");
            };

            request.onerror = function (event) {
                console.error("Delete category error: ", event.target.error);
            };
        } catch (error) {
            console.error("deleteCategory error:", error);
        }
    },

    // Products CRUD
    getProducts: async function () {
        try {
            const db = await this.getDbConnection();
            return new Promise((resolve, reject) => {
                var transaction = db.transaction(["products"], "readonly");
                var objectStore = transaction.objectStore("products");
                var products = [];

                objectStore.openCursor().onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        products.push(cursor.value);
                        cursor.continue();
                    } else {
                        resolve(products);
                    }
                };

                transaction.onerror = function (event) {
                    reject(new Error("Transaction error: " + event.target.error));
                };
            });
        } catch (error) {
            console.error("getProducts error:", error);
            throw error;
        }
    },

    addProduct: async function (product) {
        try {
            const db = await this.getDbConnection();
            var transaction = db.transaction(["products"], "readwrite");
            var objectStore = transaction.objectStore("products");

            if ('ProductId' in product) {
                delete product.ProductId;
            }

            var request = objectStore.add(product);
            request.onsuccess = function (event) {
                var autoGeneratedId = event.target.result;
                console.log("Product added successfully with ID: " + autoGeneratedId);
            };

            request.onerror = function (event) {
                console.error("Add product error: ", event.target.error);
            };
        } catch (error) {
            console.error("addProduct error:", error);
        }
    },

    editProduct: async function (product) {
        try {
            if (!product.hasOwnProperty('ProductId') || product.ProductId === undefined) {
                console.error("ProductId is missing or undefined. Cannot update the product.");
                return;
            }

            const db = await this.getDbConnection();
            var transaction = db.transaction(["products"], "readwrite");
            var objectStore = transaction.objectStore("products");

            var request = objectStore.put(product);
            request.onsuccess = function () {
                console.log("Product edited successfully");
            };

            request.onerror = function (event) {
                console.error("Edit product error: ", event.target.error);
            };
        } catch (error) {
            console.error("editProduct error:", error);
        }
    },

    deleteProduct: async function (ProductId) {
        try {
            const db = await this.getDbConnection();
            var transaction = db.transaction(["products"], "readwrite");
            var objectStore = transaction.objectStore("products");

            var request = objectStore.delete(ProductId);
            request.onsuccess = function () {
                console.log("Product deleted successfully");
            };

            request.onerror = function (event) {
                console.error("Delete product error: ", event.target.error);
            };
        } catch (error) {
            console.error("deleteProduct error:", error);
        }
    }
};

// Initialize the database
window.indexedDb.openDb();
